generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model BusinessOwner {
  id          String   @id @default(uuid())
  displayName String
  phoneNumber String?
  businessCount Int     @default(0)
  bio         String?
  website     String?
  userId      String   @unique // Add @unique here
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([userId])
}

model Client {
  id                      String         @id @default(uuid())
  firstName               String
  lastName                String
  phoneNumber             String
  referralCode            String?
  displayName             String
  interests               String[]
  location                Json? // Changed from String? to Json?
  followingCount          Int            @default(0)
  notificationPreferences Json?
  userId                  String         @unique
  created_at              DateTime       @default(now())
  updated_at              DateTime       @updatedAt
  pointsWallets           PointsWallet[] // Add this line

  @@index([userId])
}

model ClientOnboarding {
  id              String   @id @default(uuid())
  userId          String   @unique // References Supabase auth.users.id
  appUsage        String[]
  discovery       String
  interests       String[]
  customDiscovery String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Business {
  id             String         @id @default(uuid())
  ownerId        String
  name           String
  description    String
  category       String
  address        String?
  city           String?
  state          String?
  country        String?
  lat            Float?
  lng            Float?
  logoUrl        String?
  coverPhotoUrl  String?
  isVerified     Boolean        @default(false)
  followersCount Int            @default(0)
  postsCount     Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  PointsWallet   PointsWallet[]
  Promotion      Promotion[]

  @@index([ownerId])
}

model Follow {
  id                   String   @id @default(uuid())
  clientId             String
  businessId           String
  followedAt           DateTime @default(now())
  notificationsEnabled Boolean  @default(false)

  @@index([clientId])
  @@index([businessId])
}

model Post {
  id            String   @id @default(uuid())
  businessId    String
  content       String
  imageUrls     String[] // JSON string array
  tags          String[] // JSON string array
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  likesCount    Int      @default(0)
  commentsCount Int      @default(0)
  isPinned      Boolean  @default(false)

  @@index([businessId])
}

model PasswordResetOtp {
  id        String   @id @default(uuid())
  userId    String // References Supabase auth.users.id
  email     String
  code      String // 4-digit code (stored hashed)
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([email])
}

model PointsWallet {
  id          String   @id @default(uuid())
  clientId    String
  businessId  String
  points      Int      @default(0)
  lastUpdated DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  client              Client                @relation(fields: [clientId], references: [id])
  business            Business              @relation(fields: [businessId], references: [id])
  transactions        PointsTransaction[]
  PromotionRedemption PromotionRedemption[]

  @@unique([clientId, businessId])
  @@index([clientId])
  @@index([businessId])
}

model PointsTransaction {
  id          String    @id @default(uuid())
  walletId    String
  points      Int
  type        String // EARNED, SPENT, ADJUSTMENT, EXPIRATION
  description String
  referenceId String?
  expiresAt   DateTime?
  expired     Boolean   @default(false)
  createdAt   DateTime  @default(now())

  wallet PointsWallet @relation(fields: [walletId], references: [id])

  @@index([walletId])
  @@index([referenceId])
}

model Promotion {
  id          String   @id @default(uuid())
  businessId  String
  name        String
  description String
  pointsCost  Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  business    Business              @relation(fields: [businessId], references: [id])
  redemptions PromotionRedemption[]

  @@index([businessId])
}

model PromotionRedemption {
  id          String   @id @default(uuid())
  promotionId String
  walletId    String
  redeemedAt  DateTime @default(now())

  promotion Promotion    @relation(fields: [promotionId], references: [id])
  wallet    PointsWallet @relation(fields: [walletId], references: [id])

  @@index([promotionId])
  @@index([walletId])
}
